#
# Apache 2.4 Varnished CHROOTED PHP-FPM WordPress Virtual Host
# Andrew Bevitt <me@andrewbevitt.com>
# http://andrewbevitt.com/tutorials/apache-varnish-chrooted-php-fpm-wordpress-virtual-host/
#
# This virtual host is designed to host both a plain HTML
# and simple PHP script to show a message indicating the
# requested host is not configured on the server. The PHP
# script also includes some client request details.
#
# A rewrite rule sends all non-matching requests to the
# PHP script by default but you can change this to HTML
# if you don't want the PHP overhead.
#
# As per the tutorial we have Apache sitting behind Varnish
# for HTTP but not HTTPS and we have statically linked the
# mod_ssl module. Varnish is configured to send requests to
# 127.0.0.1:80; however we use *:80 below because:
#  1) Listen directive in ports.conf limits to 127.0.0.1
#  2) Makes this still work if you remove Varnish
#	 (all you need to do is change ports.conf)
#
# The SSL catch all virtual host should be overwritten by
# IP based virtual hosts if your client browsers do NOT
# support SNI (Basically is just IE on Windows XP).
#

<VirtualHost *:80>

	# Virtual host details
	# No server name as this is the default
	ServerAdmin webmaster@example.com
	DocumentRoot /srv/www/default/public

	# Redirect evernything to helloworld.html in DocRoot
	<Directory /srv/www/default/public/>
		Require all granted
		AllowOverride None
		RewriteEngine On
		RewriteCond %{REQUEST_URI} !^/helloworld.html$
		RewriteCond %{REQUEST_URL} !^/helloworld.php$
		RewriteRule .* /helloworld.php [L,R=302]
	</Directory>

	# Change favicon.ico requests to GONE instead of MISSING
	Redirect gone /favicon.ico

	# Send helloworld.php request to the PHP5-FPM service
	# NOTE: This assumes PHP5-FPM is CHROOTED to /srv/www/default
	ProxyPassMatch ^/helloworld\.php$ fcgi://127.0.0.1:9000/public/helloworld.php

</VirtualHost>

<VirtualHost *:443>

	# Virtual host details
	# No server name as this is default
	ServerAdmin webmaster@example.com
	DocumentRoot /srv/www/default/public

	# Redirect evernything to helloworld.html in DocRoot
	<Directory /srv/www/default/public/>
		Require all granted
		AllowOverride None
		RewriteEngine On
		RewriteCond %{REQUEST_URI} !^/helloworld.html$
		RewriteCond %{REQUEST_URI} !^/helloworld.php$
		RewriteRule .* /helloworld.php [L,R=302]
	</Directory>

	# Change favicon.ico requests to GONE instead of MISSING
	Redirect gone /favicon.ico

	# Send helloworld.php request to the PHP5-FPM service
	# NOTE: This assumes PHP5-FPM is CHROOTED to /srv/www/default
	ProxyPassMatch ^/helloworld\.php$ fcgi://127.0.0.1:9000/public/helloworld.php

	# Turn on SSL and use snakeoil certificate
	SSLEngine on
	SSLCertificateFile	/etc/ssl/certs/ssl-cert-snakeoil.pem
	SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#	 This forces an unclean shutdown when the connection is closed, i.e. no
	#	 SSL close notify alert is send or allowed to received.  This violates
	#	 the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#	 this when you receive I/O errors because of the standard approach where
	#	 mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#	 This forces an accurate shutdown when the connection is closed, i.e. a
	#	 SSL close notify alert is send and mod_ssl waits for the close notify
	#	 alert of the client. This is 100% SSL/TLS standard compliant, but in
	#	 practice often causes hanging connections with brain-dead browsers. Use
	#	 this only for browsers where you know that their SSL implementation
	#	 works correctly.
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	BrowserMatch "MSIE [2-6]" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0
	# MSIE 7 and newer should be able to use keepalive
	BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown

</VirtualHost>

